---
import Header from '../../components/Header.astro';
import { siteConfig } from '../../config';

import '../../styles/global.css';

export async function getStaticPaths() {
  const modules = import.meta.glob('../../contents/*.{md,mdx}', { eager: true });
  return Object.keys(modules).map((path) => {
    const slug = path.split('/').pop().replace(/\.mdx?$/, '').replace(/\.md$/, '');
    return { params: { slug } };
  });
}

const modules = import.meta.glob('../../contents/*.{md,mdx}', { eager: true });

const all = Object.fromEntries(
  Object.entries(modules).map(([path, mod]) => {
    const slug = path.split('/').pop().replace(/\.mdx?$/, '').replace(/\.md$/, '');
    return [slug, mod];
  })
);

const { slug } = Astro.params;
const project = all[slug];

if (!project) {
  throw new Error(`Project "${slug}" not found. Ensure src/contents/${slug}.md exists.`);
}

const ProjectContent = project.default;
const meta = project.frontmatter ?? {};
---
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>{meta.title ?? slug} — {Astro.site?.title}</title>
    <meta name="description" content={meta.summary ?? meta.description ?? Astro.site?.description ?? ''} />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <meta name="color-scheme" content="light dark" />
    <style>
    :root { --project-text: rgba(var(--text-color), 1); --project-muted: rgba(var(--muted-text-color), 1); }

    .project-prose {
      font-family: var(--mono-font);
      color: var(--project-text);
      line-height: 1.8;
      font-size: 1.03rem;
    }

    .project-prose p {
      margin-top: 0.9rem;
      margin-bottom: 1.05rem;
      font-size: 1.02rem;
      letter-spacing: 0.0015em;
      color: var(--project-text);
      font-family: var(--body-font);
      font-weight: 400;
    }

    .project-prose .prose h1,
    .project-prose h1 {
      font-size: 1.9rem;
      margin-top: 1.6rem;
      margin-bottom: 0.6rem;
      line-height: 1.12;
      font-weight: 600;
      color: rgba(var(--text-color), 1);
      font-family: var(--heading-font);
      text-align: left;
    }
    
    /* fake h3 by styling h2 smaller — use ## in markdown for this "h3 look" */
    .project-prose .prose h2,
    .project-prose h2 {
      font-size: 1.125rem;
      margin-top: 1.2rem;
      margin-bottom: 0.6rem;
      line-height: 1.15;
      font-weight: 600;
      color: rgba(var(--text-color), 1);
      font-family: var(--heading-font);
      text-align: left;
    }

    .project-prose ul, .project-prose ol {
      padding-left: 1.25rem;
      margin-top: 0.6rem;
      margin-bottom: 0.9rem;
      color: var(--project-text);
    }

    .project-prose pre {
      background: rgba(11,18,32,0.86);
      color: #e6eef8;
      padding: 1rem;
      border-radius: 8px;
      overflow-x: auto;
      font-size: 0.95rem;
    }
    .project-prose code {
      font-family: var(--mono-font);
      background: rgba(15,23,42,0.06);
      padding: 0.12rem 0.3rem;
      border-radius: 4px;
      color: rgba(var(--text-color), 0.95);
    }

    .project-prose .katex { font-size: 1.02rem; line-height: 1.35; }
    .project-prose .katex-display { margin: 1rem 0; }

    .skill-pill {
      display:inline-block;
      font-family: var(--mono-font);
      padding: 0.25rem 0.6rem;
      border-radius: 0.5rem;
      background: rgba(var(--card-bg-rgb), 0.92);
      color: rgba(var(--text-color), 1);
      font-size: 0.75rem;
      margin-right:0.35rem;
      margin-top:0.3rem;
      font-weight: 600;
    }

    a.cite {
      color: rgba(var(--muted-text-color), 1);
      text-decoration: none;
      padding: 0 .18rem;
      border-radius: 6px;
      transition: background-color .18s ease, color .18s ease, transform .12s ease;
      display: inline-block;
      line-height: 1;
      vertical-align: baseline;
      font-weight: 500;
    }

    a.cite:hover,
    a.cite:focus {
      background: rgba(var(--accent-rgb), 0.08);
      color: var(--accent-color);
      transform: translateY(-1px);
      outline: none;
    }

    a.cite.cite-active {
      background: rgba(var(--accent-rgb), 0.12);
      color: var(--accent-color);
      box-shadow: 0 6px 20px rgba(2,6,23,0.12);
    }

    a.cite:focus-visible { box-shadow: 0 0 0 4px rgba(var(--accent-rgb),0.12); border-radius: 4px; }

    .ref-panel {
      position: absolute;
      left: 0;
      top: 0;
      width: 360px;
      max-width: 48vw;
      max-height: 60vh;
      overflow-y: auto;
      padding: 1rem;
      background: rgba(var(--card-bg-rgb), 0.78);
      backdrop-filter: blur(8px);
      -webkit-backdrop-filter: blur(8px);
      border: 1px solid rgba(var(--muted-text-color), 0.08);
      box-shadow: 0 12px 40px rgba(2,6,23,0.12);
      font-family: var(--mono-font);
      font-size: 0.95rem;
      display: none;
      z-index: 9999;
      border-radius: 10px;
      opacity: 0;
      transform: translateY(6px);
      transition: opacity .22s ease, transform .22s ease;
    }

    .ref-panel.open {
      display: block;
      opacity: 1;
      transform: translateY(0);
    }

    .ref-panel h4 { font-weight: 600; margin-bottom: .45rem; color: rgba(var(--text-color),1); }
    .ref-entry { margin-bottom: .9rem; color: rgba(var(--text-color),0.95); }

    #references {
      text-align: left;
      max-width: 640px;
      margin: 2rem 0 4rem;
      padding: 0 1rem 0 0;
    }
    #references h2 {
      font-size: 1.125rem;
      font-weight: 600;
      margin-bottom: 0.75rem;
      color: rgba(var(--text-color),1);
    }
    
    #referencesList {
      list-style: none;
      padding-left: 0;
      margin-left: 0;
    }
    
    #referencesList li {
      margin-bottom: 0.9rem;
      display: flex;
      gap: 0.75rem;
      align-items: flex-start;
      text-align: left;
    }
    
    .ref-num {
      color: rgba(var(--muted-text-color),1);
      min-width: 2.2ch;
      text-align: right;
      font-weight: 600;
      margin-top: 0.08rem;
      line-height: 1.2;
      flex: 0 0 auto;
    }
    
    .ref-body {
      color: rgba(var(--text-color), 0.95);
      line-height: 1.45;
      font-family: var(--body-font);
      flex: 1 1 auto;
    }

    /* Ensure any nested markup from the hidden ref definitions is normalised and left-aligned */
    .ref-body .ref-entry { display:block; text-align:left; margin:0; padding:0; }
    .ref-body strong { font-weight:600; }
    .ref-body a { color: inherit; text-decoration: underline; }

    .ref-list-btn {
      display: flex;
      gap: 0.75rem;
      align-items: flex-start;
      width: 100%;
      padding: 0;
      border: 0;
      background: transparent;
      text-align: left;
      font-family: var(--body-font);
      font-weight: 400;
      color: inherit;
      cursor: pointer;
    }

    @media (max-width: 1024px) {
      .ref-panel { position: fixed; left: 8px; right: 8px; top: 12vh; max-width: calc(100% - 16px); width: auto; }
    }
    </style>
  </head>

  <script>
    (function normalizeReferenceLinks(){
      function convert() {
        const anchors = document.querySelectorAll('.project-prose a[href^="#ref-"]');
        anchors.forEach(a => {
          try {
            const href = a.getAttribute('href');
            const id = href.replace(/^#/, '');
            a.classList.add('cite');
            a.setAttribute('data-ref', id.replace(/^ref-/, ''));
            a.setAttribute('role', 'button');
            a.setAttribute('tabindex', '0');
          } catch(e){}
        });
      }
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', convert);
      } else convert();
    })();
  </script>

  <style>
    #refContent { text-align: left; max-width: 65ch; margin: 2rem auto; }
  </style>

  <body class="bg-white text-gray-900 font-mono">
    <Header />

    <main class="max-w-4xl mx-auto px-6 md:px-8 lg:px-12 py-10 pt-28">
      
      <header class="project-header mb-6">
        <h1 class="text-3xl md:text-4xl leading-tight font-normal">{meta.title}</h1>
        {meta.skills && meta.skills.length > 0 && (
          <div class="flex flex-wrap gap-2 mt-3">
            {meta.skills.map(s => (
              <span class="px-2.5 sm:px-3 py-1 sm:py-1.5 bg-gray-900 text-white rounded-md sm:rounded-lg text-xs sm:text-sm font-medium">
                {s}
              </span>
            ))}
          </div>
        )}
      </header>

      {(meta.banner ?? (`/projects/${slug}.jpg`)) ? (
        <div class="project-banner my-6">
          <img
            src={meta.banner ?? `/projects/${slug}.jpg`}
            alt={`${meta.title ?? slug} banner`}
            class="w-full rounded-lg object-cover max-h-[420px]"
            onerror="this.src='/assets/projects/placeholder.jpg'"
            loading="lazy"
          />
        </div>
      ) : null}

      <article class="project-prose">
        <article class="prose prose-lg lg:prose-xl max-w-none mx-auto dark:prose-invert"><ProjectContent /></article>
      </article>

      <section id="references" aria-labelledby="references-heading" class="hidden">
        <h2 id="references-heading">References</h2>
        <ol id="referencesList"></ol>
      </section>
    </main>

  <aside id="refPanel" class="ref-panel" aria-hidden="true">
    <h4>References</h4>
    <div id="refContent"></div>
  </aside>
  
  <script>
  (function(){
    const refPanel = document.getElementById('refPanel');
    const refContent = document.getElementById('refContent');
    let hoverTimer = null;
    let activeCite = null;

    function showPanelForElement(el, htmlContent) {
      if (!el || !refPanel) return;
      refContent.innerHTML = htmlContent;

      refPanel.classList.add('open');
      refPanel.setAttribute('aria-hidden', 'false');

      const rect = el.getBoundingClientRect();
      const scrollX = window.scrollX || window.pageXOffset;
      const scrollY = window.scrollY || window.pageYOffset;

      const viewportWidth = document.documentElement.clientWidth;
      const viewportHeight = document.documentElement.clientHeight;

      let left = rect.right + 12 + scrollX;
      let top = rect.top + scrollY;

      const panelWidth = refPanel.offsetWidth || 320;
      const panelHeight = refPanel.offsetHeight || Math.round(viewportHeight * 0.5);

      if (left + panelWidth > viewportWidth - 12 + scrollX) {
        left = rect.left - panelWidth - 12 + scrollX;
      }
      if (left < 12 + scrollX) left = 12 + scrollX;

      if (top + panelHeight > scrollY + viewportHeight - 12) {
        top = Math.max(scrollY + 12, (scrollY + viewportHeight) - panelHeight - 12);
      }
      if (top < scrollY + 12) top = scrollY + 12;

      refPanel.style.left = `${left}px`;
      refPanel.style.top = `${top}px`;
    }

    document.addEventListener('pointerenter', (e) => {
      const el = e.target.closest && e.target.closest('a.cite[data-ref]');
      if (!el) return;
      clearTimeout(hoverTimer);
      const id = el.getAttribute('data-ref');
      const def = document.getElementById('ref-' + id);
      if (!def) return;
      const defInner = def.querySelector('.ref-entry') || def;
      if (activeCite && activeCite !== el) activeCite.classList.remove('cite-active');
      el.classList.add('cite-active');
      activeCite = el;
      showPanelForElement(el, defInner.innerHTML);
    }, true);

    document.addEventListener('pointerleave', (e) => {
      const el = e.target.closest && e.target.closest('a.cite[data-ref]');
      if (!el) return;
      hoverTimer = setTimeout(() => {
        if (el.classList.contains('cite-active')) el.classList.remove('cite-active');
        if (refPanel) {
          refPanel.classList.remove('open');
          refPanel.setAttribute('aria-hidden', 'true');
        }
        activeCite = null;
      }, 250);
    }, true);

    if (refPanel) {
      refPanel.addEventListener('pointerenter', () => clearTimeout(hoverTimer));
      refPanel.addEventListener('pointerleave', () => {
        hoverTimer = setTimeout(() => {
          if (activeCite) activeCite.classList.remove('cite-active');
          if (refPanel) {
            refPanel.classList.remove('open');
            refPanel.setAttribute('aria-hidden', 'true');
          }
          activeCite = null;
        }, 200);
      });
    }

    document.addEventListener('click', function(e){
      const el = e.target.closest && e.target.closest('a.cite[data-ref]');
      if (!el) return;
      e.preventDefault();
      const id = el.getAttribute('data-ref');
      const def = document.getElementById('ref-' + id);
      if (!def) return;
      const defInner = def.querySelector('.ref-entry') || def;

      if (activeCite && activeCite !== el) {
        activeCite.classList.remove('cite-active');
      }
      if (el.classList.contains('cite-active')) {
        el.classList.remove('cite-active');
        refPanel.classList.remove('open');
        refPanel.setAttribute('aria-hidden', 'true');
        activeCite = null;
        return;
      }

      el.classList.add('cite-active');
      activeCite = el;

      showPanelForElement(el, defInner.innerHTML);
    });

    document.addEventListener('click', function(e){
      if (!e.target.closest('.ref-panel') && !e.target.closest('a.cite[data-ref]') && !e.target.closest('.ref-list-btn')) {
        if (activeCite) activeCite.classList.remove('cite-active');
        activeCite = null;
        if (refPanel) {
          refPanel.classList.remove('open');
          refPanel.setAttribute('aria-hidden', 'true');
        }
      }
    });

    window.addEventListener('scroll', function() {
      if (refPanel && refPanel.classList.contains('open') && activeCite) {
        showPanelForElement(activeCite, refContent.innerHTML);
      }
    }, { passive: true });
    window.addEventListener('resize', function() {
      if (refPanel && refPanel.classList.contains('open') && activeCite) {
        showPanelForElement(activeCite, refContent.innerHTML);
      }
    });

    function buildReferencesList() {
      const refsSection = document.getElementById('references');
      const listEl = document.getElementById('referencesList');
      if (!refsSection || !listEl) return;
    
      const citedAnchors = Array.from(document.querySelectorAll('a.cite[data-ref]'));
      const seen = new Set();
      const referencedIds = [];
      for (const a of citedAnchors) {
        const id = a.getAttribute('data-ref');
        if (!id) continue;
        if (!seen.has(id)) {
          seen.add(id);
          referencedIds.push(id);
        }
      }
    
      if (!referencedIds.length) {
        refsSection.classList.add('hidden');
        listEl.innerHTML = '';
        return;
      }
    
      listEl.innerHTML = '';
      refsSection.classList.remove('hidden');
    
      referencedIds.forEach((refId, idx) => {
        const def = document.getElementById('ref-' + refId);
        if (!def) return;
        const defInner = def.querySelector('.ref-entry') || def;
    
        const li = document.createElement('li');
    
        const btn = document.createElement('button');
        btn.type = 'button';
        btn.className = 'ref-list-btn';
        btn.setAttribute('aria-label', `Open reference ${idx + 1}`);
    
        const numSpan = document.createElement('span');
        numSpan.className = 'ref-num';
        numSpan.textContent = `[${idx + 1}]`;
    
        const bodySpan = document.createElement('span');
        bodySpan.className = 'ref-body';
        bodySpan.innerHTML = defInner.innerHTML; // use inner ref-entry content only
    
        btn.addEventListener('click', function(ev) {
          ev.preventDefault();
          if (activeCite) { activeCite.classList.remove('cite-active'); activeCite = null; }
          showPanelForElement(btn, defInner.innerHTML);
        });
    
        btn.appendChild(numSpan);
        btn.appendChild(bodySpan);
        li.appendChild(btn);
        listEl.appendChild(li);
      });
    }

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', buildReferencesList);
    } else {
      buildReferencesList();
    }

  })();
</script>
  </body>
</html>

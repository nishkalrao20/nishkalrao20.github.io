---
import { siteConfig } from "../config";
const news = siteConfig.news ?? [];

const getFileName = (url) => {
  try {
    if (!url) return "";
    const parts = url.split('/');
    return decodeURIComponent(parts[parts.length - 1] || url);
  } catch (e) {
    return url || "";
  }
};

const isImage = (url) => {
  if (!url) return false;
  return /\.(png|jpe?g|gif|webp|avif|svg)$/i.test(url.split('?')[0]);
};

const getFileType = (url) => {
  if (!url) return "";
  const m = url.split('?')[0].match(/\.([^.\/]+)$/);
  return m ? m[1].toLowerCase() : "";
};

const isYouTube = (url) => {
  if (!url) return false;
  try {
    return /^(?:https?:)?\/\/(?:www\.)?(?:youtube\.com\/watch|youtu\.be\/)/i.test(url);
  } catch (e) {
    return false;
  }
};

const getYouTubeId = (url) => {
  if (!url) return null;
  try {
    const shortMatch = url.match(/youtu\.be\/([A-Za-z0-9_-]{6,})/);
    if (shortMatch) return shortMatch[1];

    const watchMatch = url.match(/[?&]v=([A-Za-z0-9_-]{6,})/);
    if (watchMatch) return watchMatch[1];

    const embedMatch = url.match(/youtube\.com\/embed\/([A-Za-z0-9_-]{6,})/);
    if (embedMatch) return embedMatch[1];

    const parts = url.split('/');
    const last = parts.pop() || parts.pop();
    if (last && /^[A-Za-z0-9_-]{6,}$/.test(last)) return last;

    return null;
  } catch (e) {
    return null;
  }
};

const getYouTubeEmbedUrl = (id) => id ? `https://www.youtube.com/embed/${id}?rel=0` : null;
const getYouTubeThumb = (id) => id ? `https://img.youtube.com/vi/${id}/hqdefault.jpg` : null;
---
{news.length > 0 && (
  <section id="news" class="p-8 sm:p-12 md:p-16 lg:p-24">
    <div class="grid grid-cols-1 lg:grid-cols-12 gap-8 lg:gap-16 items-start">
      <div class="lg:col-span-4">
        <h2 class="text-3xl sm:text-4xl md:text-5xl xl:text-7xl font-bold text-gray-900">Updates</h2>
        <div class="w-[75px] h-[5px] mt-2 rounded-full" style="background-color: var(--accent-color);"></div>
      </div>

      <div class="lg:col-span-8">
        <div class="news-slider relative overflow-hidden">
          <div id="newsTrack" class="flex gap-6 transition-transform duration-600 will-change-transform">
            {news.map((item, idx) => {
              const href = item.program ?? item.url ?? null;
              const linkProps = href && href.startsWith('http') ? { href, target: "_blank", rel: "noopener noreferrer" } : { href };
              const posterIsImage = !!item.poster && isImage(item.poster);
              const fileType = item.poster ? getFileType(item.poster) : (item.docs ? getFileType(item.docs) : '');
              const fileLabel = fileType ? fileType.toUpperCase() : "FILE";

              const cardContent = (
                <div class="flex flex-col h-full">
                  {posterIsImage ? (
                    <img src={item.poster} alt={getFileName(item.poster)} loading="lazy"
                      class="w-full h-44 md:h-36 object-cover rounded-xl mb-4" />
                  ) : (
                    (item.poster && isYouTube(item.poster)) ? (() => {
                      const ytId = getYouTubeId(item.poster);
                      const embed = getYouTubeEmbedUrl(ytId);
                      const thumb = getYouTubeThumb(ytId);
                      return (
                        <div class="w-full rounded-xl overflow-hidden mb-4 bg-black">
                          {embed ? (
                            <div class="relative" style="padding-top:56.25%; height:0;">
                              <iframe
                                src={embed}
                                title={item.title || 'YouTube'}
                                class="absolute inset-0 w-full h-full"
                                frameborder="0"
                                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                                allowfullscreen
                                loading="lazy"
                              />
                            </div>
                          ) : (
                            <img src={thumb || item.poster} alt={getFileName(item.poster)} loading="lazy" class="w-full h-44 md:h-36 object-cover rounded-xl" />
                          )}
                        </div>
                      );
                    })() : (
                      (item.poster && ['mp4','webm','ogg'].includes(fileType)) ? (
                        <div class="w-full h-44 md:h-36 rounded-xl overflow-hidden mb-4 bg-black">
                          <video
                            src={item.poster}
                            controls
                            preload="metadata"
                            class="w-full h-full object-cover"
                            poster={item.posterPoster ?? undefined} 
                          >
                            Sorry, your browser doesn't support embedded videos.
                          </video>
                        </div>
                      ) : null
                    )
                  )}

                  <div class="flex-1">
                    <h3 class="text-lg font-medium" style="font-family: var(--heading-font)">{item.title}</h3>
                    <p class="text-sm text-muted mt-1">{item.description}</p>
                  </div>

                  <div class="mt-4 flex items-center justify-between">
                    <div class="text-xs text-muted font-mono">{item.date}</div>

                    <div class="flex items-center gap-2">
                      {item.poster && !posterIsImage ? (
                        <a
                          href={item.poster}
                          target="_blank"
                          rel="noopener noreferrer"
                          class="inline-flex items-center gap-2 text-xs font-mono px-2 py-1 rounded-md border card-surface shadow-sm max-w-[11rem] overflow-hidden transition-colors duration-200 ease-out hover:text-[var(--accent-color)] hover:border-[var(--accent-color)] hover:bg-[rgba(var(--accent-rgb),0.06)] focus:outline-none focus:ring-2 focus:ring-[var(--accent-color)]/20"
                          title={isYouTube(item.poster) ? `Watch on YouTube: ${item.title ?? getFileName(item.poster)}` : getFileName(item.poster)}
                          aria-label={isYouTube(item.poster) ? `Watch video: ${item.title ?? getFileName(item.poster)}` : `Open poster: ${getFileName(item.poster)}`}
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 flex-shrink-0" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                            <path d="M14 2v6h6"></path>
                          </svg>
                      
                        <span class="font-medium">{['mp4','webm','ogg'].includes(fileType) ? 'Video': 'Poster'}</span>                          
                          <span class="font-medium">
                            {isYouTube(item.poster) ? 'Watch' : (['mp4','webm','ogg'].includes(fileType) ? 'Video')}
                          </span>
                        </a>
                      ) : null}

                      {item.docs ? (
                        <a
                          href={item.docs}
                          target="_blank"
                          rel="noopener noreferrer"
                          class="inline-flex items-center gap-2 text-xs font-mono px-2 py-1 rounded-md border card-surface shadow-sm max-w-[11rem] overflow-hidden transition-colors duration-200 ease-out hover:text-[var(--accent-color)] hover:border-[var(--accent-color)] hover:bg-[rgba(var(--accent-rgb),0.06)] focus:outline-none focus:ring-2 focus:ring-[var(--accent-color)]/20"
                          title={getFileName(item.docs)}
                          aria-label={`Open notes: ${getFileName(item.docs)}`}
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 flex-shrink-0" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                            <path d="M8 11h8M8 15h8M8 7h4"></path>
                          </svg>
                      
                          <span class="font-medium">Notes</span>
                        </a>
                      ) : null}
                    </div>
                  </div>
                </div>
              );

              return (
                <article class="w-full min-w-full sm:min-w-[60%] md:min-w-[50%] lg:min-w-[33.333%] rounded-2xl border card-surface p-5 shadow-sm transition-all duration-250" key={item.title}>
                  {href ? (
                    <a {...linkProps} class="block h-full">
                      {cardContent}
                    </a>
                  ) : (
                    <div class="block h-full">
                      {cardContent}
                    </div>
                  )}
                </article>
              );
            })}
          </div>

          <button id="newsPrev" aria-label="Previous update" class="absolute left-3 top-1/2 -translate-y-1/2 p-2 rounded bg-[rgba(var(--card-bg-rgb),0.85)]">‹</button>
          <button id="newsNext" aria-label="Next update" class="absolute right-3 top-1/2 -translate-y-1/2 p-2 rounded bg-[rgba(var(--card-bg-rgb),0.85)]">›</button>
        </div>
      </div>
    </div>

    <script is:inline>
      (function initNewsCarousel(){
        document.addEventListener('DOMContentLoaded', () => {
          const track = document.getElementById('newsTrack');
          const prevBtn = document.getElementById('newsPrev');
          const nextBtn = document.getElementById('newsNext');
          if (!track || !prevBtn || !nextBtn) return;
    
          const cards = Array.from(track.children);
          if (!cards.length) return;
    
          track.style.transitionProperty = 'transform';
          track.style.transitionDuration = track.style.transitionDuration || '600ms';
          track.style.willChange = 'transform';
    
          let idx = 0;
          let autoTimer = null;
          const AUTO_DELAY = 3500;
    
          function scrollToIndex(i, smooth = true) {
            i = Math.max(0, Math.min(i, cards.length - 1));
            idx = i;
            const left = cards[i].offsetLeft;
            if (!smooth) {
              const prevDuration = track.style.transitionDuration;
              track.style.transitionDuration = '0ms';
              track.style.transform = `translateX(-${left}px)`;
              // force reflow then restore
              void track.offsetHeight;
              track.style.transitionDuration = prevDuration;
            } else {
              track.style.transform = `translateX(-${left}px)`;
            }
          }
    
          function next() {
            idx = (idx + 1) % cards.length;
            scrollToIndex(idx);
          }
          function prev() {
            idx = (idx - 1 + cards.length) % cards.length;
            scrollToIndex(idx);
          }
    
          function startAuto() {
            stopAuto();
            autoTimer = setInterval(next, AUTO_DELAY);
          }
          function stopAuto() {
            if (autoTimer) {
              clearInterval(autoTimer);
              autoTimer = null;
            }
          }
          function resetAuto() {
            stopAuto();
            startAuto();
          }
    
          nextBtn.addEventListener('click', (e) => { e.preventDefault(); next(); resetAuto(); });
          prevBtn.addEventListener('click', (e) => { e.preventDefault(); prev(); resetAuto(); });
    
          const slider = track.closest('.news-slider');
          if (slider) {
            slider.addEventListener('mouseenter', () => stopAuto());
            slider.addEventListener('mouseleave', () => startAuto());
          }
    
          let resizeTimer = null;
          window.addEventListener('resize', () => {
            if (resizeTimer) clearTimeout(resizeTimer);
            resizeTimer = setTimeout(() => scrollToIndex(idx, false), 120);
          });
    
          scrollToIndex(0, false);
          startAuto();
        });
      })();
    </script>
  </section>
)}
